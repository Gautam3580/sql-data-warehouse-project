/*
========================================================================================
Stored Procedure: Load Silver Layer (Bronze --> Silver)
========================================================================================
Script Purpose:
This stored procedure performs the ETL (Extract, Transform and Load) process to populate the 'Silver' schema tables from the
'Bronze' schema.

-- Actions Performed:
   -- Truncates silver tables
   -- Inserts transformed and cleansed data from Bronze into silver tables.

   Parameters:
   -- None.
   -- This stored procesure does not accept any parameter or return any values.

   Usage Example:
   -- exec Silver.Load_silver;
========================================================================================
*/


-- INSERT Clean data into the Silver.crm_cust_info

ALTER PROCEDURE Silver.Load_silver AS
BEGIN

	DECLARE @Start_time datetime, @End_time datetime;
	
	SET @Start_time = GETDATE();

	BEGIN TRY
		Declare @starttime datetime, @endtime datetime;

		SET @starttime = GETDATE();
		PRINT'Data loding started into CRM System';
		PRINT'Truncate table before loading data';
		TRUNCATE TABLE Silver.crm_cust_info;
		PRINT'Loading data into Silver.crm_cust_info';

		INSERT INTO Silver.crm_cust_info (
		cst_id,
		cst_key,
		cst_firstname,
		cst_lastname,
		cst_marital_status,
		cst_gndr,
		cst_create_date)

		SELECT
		cst_id,
		cst_key,
		TRIM(cst_firstname) as cst_firstname,
		TRIM(cst_lastname) as cst_lastname,
		CASE WHEN TRIM(UPPER(cst_marital_status)) = 'M' THEN 'Married'
			 WHEN TRIM(UPPER(cst_marital_status)) = 'S' THEN 'Single'
			 ELSE 'n/a'
		END cst_marital_Status,

		CASE WHEN TRIM(UPPER(cst_gndr)) = 'M' THEN 'Male'
			 WHEN TRIM(UPPER(cst_gndr)) ='F' THEN 'Female'
			 ELSE 'n/a'
		END cst_gndr,
		cst_create_date
		From 
			( SELECT 
			*,
			ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC ) as Flag_last
			From Bronze.crm_cust_info
			WHERE cst_id is not null
			) t Where Flag_last = 1;


		-- Updated 2 table from: Silver Layer: Silver.crm.prod_infor table with all data transformations.

		PRINT'Truncate table before loading data';
		TRUNCATE TABLE Silver.crm_prod;
		PRINT'Loading data into Silver.crm_prod';
		INSERT INTO Silver.crm_prod
		(
			prd_id,
			cat_id,
			prd_key,
			prd_nm,
			prd_cost,
			prd_line,
			prd_start_dt,
			prd_end_dt
		)
		select
			prd_id,
			REPLACE(SUBSTRING(prd_key, 1, 5), '-', '_') as cat_id,
			SUBSTRING(prd_key, 7, LEN(prd_key)) as prd_Key,
			prd_nm,
			ISNULL(prd_cost, 0) as prd_cost,
			CASE  UPPER(TRIM(prd_line))
				 WHEN 'M' THEN 'Mountain'
				 WHEN 'R' THEN 'Road'
				 WHEN 'S' THEN 'Other Sales'
				 WHEN 'T' THEN 'Touring'
				 ELSE 'n/a'
			END prd_line,
			CAST(prd_start_dt as date) as prd_start_dt,
			CAST(LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt) - 1 AS DATE) as  prd_end_dt
		From Bronze.crm_prod;


		-- Update 3rd Table from Silver Layer: Silver.crm_sales_details

		PRINT'Truncate table before loading the data';
		TRUNCATE TABLE Silver.crm_sales_details;
		PRINT'Loading data into Silver.crm_sales_details';

		INSERT INTO Silver.crm_sales_details
		(
		sls_ord_num,
		sls_prd_key,
		sls_cust_id,
		sls_order_dt,
		sls_ship_dt,
		sls_due_dt,
		sls_sales,
		sls_quantity,
		sls_price
		)
		select 
		sls_ord_num,
		sls_prd_key,
		sls_cust_id,
		CASE WHEN sls_order_dt = 0 OR LEN(sls_order_dt) != 8 THEN NULL
			 ELSE CAST(CAST(sls_order_dt as VARCHAR) as DATE) 
		END sls_order_dt,

		CASE WHEN sls_ship_dt = 0 OR LEN(sls_ship_dt) != 8 THEN Null
			 ELSE CAST(CAST(sls_ship_dt as VARCHAR) as Date) 
			END sls_ship_dt,

		CASE WHEN sls_due_dt = 0 OR LEN(sls_due_dt) != 8 THEN NULL
			 ELSE CAST(CAST(sls_due_dt as VARCHAR) as Date)
			END sls_due_dt,

		CASE WHEN sls_sales IS NULL OR sls_sales <= 0 OR sls_sales != sls_quantity * ABS(sls_price)
			 THEN sls_quantity * ABS(sls_price)
			 ELSE sls_sales
		END AS sls_sales,

		sls_quantity,

		CASE WHEN sls_price IS NULL OR sls_price <=0 
			 THEN sls_sales / NULLIF(sls_quantity, 0)
			 ELSE sls_price
		END sls_price
		from Bronze.crm_sales_details;

		SET @endtime = GETDATE();
		PRINT'Total time taken to load data into CRM system is : ' + cast(datediff(second, @starttime, @endtime) as NVARCHAR) + 'seconds.';

		-- Build and Clean data from ERP System
		SET @starttime = GETDATE();
		-- 1st Table loading data 
	
		PRINT'Truncate table before loading data';
		TRUNcATE TABLE silver.erp_cust_az12;
		PRINT'Loading data into silver.erp_cust_az12';

		INSERT INTO silver.erp_cust_az12(cid,bdate,gen)
		select
		CASE WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid, 4, LEN(cid))
			ELSE cid
		END AS cid,
		CASE WHEN bdate > GETDATE() THEN NULL
			 ELSE bdate
		END bdate,

		CASE WHEN UPPER(TRIM(gen)) IN ('F', 'FEMALE') THEN 'Female'
			 WHEN UPPER(TRIM(gen)) IN ('M', 'MALE') THEN 'Male'
			 ELSE 'n/a'
		END AS gen
		From Bronze.erp_cust_az12;

		-- ERP 2nd Table

		PRINT'Truncate Table Before Loading';
		TRUNCATE TABLE Silver.erp_loc_a101;
		PRINT'Loading data into erp_loc_a101';

		INSERT INTO Silver.erp_loc_a101(cid,cntry)
		select 
		REPLACE(cid, '-', '') cid,
		CASE WHEN TRIM(cntry) = 'DE' THEN 'Germany'
			 WHEN TRIM(cntry) IN ('US', 'USA') THEN 'United States'
			 WHEN TRIM(cntry) is NULL OR cntry = ' ' THEN 'n/a'
			 ELSE TRIM(cntry)
		END AS cntry
		from Bronze.erp_loc_a101;

		-- ERP System 3rd Table

		PRINT'Truncate table before loading';
		TRUNCATE TABLE Silver.erp_px_cat_g1v2;
		PRINT'Loading data into table Silver.erp_px_cat_g1v2';

		INSERT INTO Silver.erp_px_cat_g1v2(id,cat,subcat,maintenance)
		select *
		from Bronze.erp_px_cat_g1v2;

		SET @endtime = GETDATE();
		PRINT'Total time taken to load data into ERP System is :' + CAST(datediff(second, @starttime, @endtime) as NVARCHAR) + ' seconds.';
		PRINT'#####################################################################';

		SET @End_time = GETDATE();
		PRINT'Total time taken to load data into both the systems is ' + CAST(datediff(second, @start_time, @end_time) as NVARCHAR) + ' seconds.';
		PRINT'**********************************************************************************';

	END TRY

	BEGIN CATCH
		PRINT'**************************************************';
		PRINT'Error occured during loading data'
		PRINT'Error Message ' + Error_message()
		PRINT'Error Line ' + Error_line()
		PRINT'Error Number ' + CAST(Error_Number() as VARCHAR);
		PRINT'Error State ' + CAST(Error_State() as VARCHAR);
		PRINT'*************************************************';
	END CATCH;

END;
