/*
===========================================================================================================
Quality Checks:
===========================================================================================================
Script Prupose:
  This script performs various quality checks for data consistancy, accuracy, and standardization across 
  the 'Silver' schema. It includes checks for:
  - Null or duplicate pirmary key.
  - Unwanted spaces in string fields.
  - Data standardization and consistancy.
  - Invalid date range and orders.
  - Data consistancy between related fields.

Usage Notes:
  - Run these checks after data loading Silver layer.
  - Investigate and resolve any discrepancies found during the checks.
===========================================================================================================
*/


Use DataWarehouse;
GO

--Check for NULLs or Duplicates in primary key
-- Expectaion: No result

select 
cst_id,
COUNT(*) 
from Bronze.crm_cust_info
GROUP BY cst_id
HAVING COUNT(*) > 1;

-- Remove duplicates from the data
select * from(
select
*,
ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) as FlagLast
From Bronze.crm_cust_info
WHERE cst_id is not null) t WHERE FlagLast > 1

-- Remove unwanted leading and trailing spaces from the string data.

select distinct (cst_marital_status)
from Bronze.crm_cust_info

--Check for NULLs or Duplicates in primary key
-- Expectaion: No result

select 
cst_id,
COUNT(*)
from Bronze.crm_cust_info
GROUP BY cst_id
HAVING COUNT(*) > 1; --OR cst_id is null;

-- Remove duplicates from  the table.

select 
* 
from 
	(
	select *,
	ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) as flagLast
	from Bronze.crm_cust_info
	WHERE cst_id is not null
	) t WHERE flagLast > 1;  -- Derieved table for calculating duplicates rows.

-- Check for unwanted spaces
--  Expectation: No results

select 
cst_firstname,
cst_lastname
from  Bronze.crm_cust_info
WHERE cst_firstname != TRIM(cst_firstname);

-- Check for any unwanted spaces in the column.
-- Expection: No result.

select
cst_gndr
from Bronze.crm_cust_info
WHERE cst_gndr != TRIM(cst_gndr);

-- Removed unwanted white spaces

Select
TRIM(cst_firstname) as cst_firstname,
TRIM(cst_lastname) as cst_lastname,
CASE WHEN TRIM(UPPER(cst_gndr)) = 'M' THEN 'Male'
	 WHEN TRIM(UPPER(cst_gndr)) = 'F' THEN 'Female'
	 Else 'n/a'
END cst_gndr,

CASE WHEN TRIM(UPPER(cst_marital_status)) = 'M' THEN 'Married'
	 WHEN TRIM(UPPER(cst_marital_status)) = 'S' THEN 'Single'
	 ELSE 'n/a'
END cst_marital_status
From Bronze.crm_cust_info;


-- 2 CRM Bronze.crm_prd

	select
	prd_id,
	prd_key,
	prd_nm,
	prd_cost,
	prd_line,
	prd_start_dt,
	prd_end_dt
	From Bronze.crm_prod;


select
	prd_id,
	COUNT(*)  as total
From Silver.crm_prod
Group By prd_id
Having COUNT(*) > 1 OR prd_id is null;

-- Checking for any Unwated spaces in the Product name columns.
-- Expectation: No results

select prd_nm
FROM Silver.crm_prod
WHERE prd_nm != TRIM(prd_nm);

-- Check for the NULLs or negative numbers in the 
-- Expectation: NO results

-- !! To check for NEGATIVE numbers in the column, we have to check for the numbers less than 0.

select 
prd_cost
from Silver.crm_prod
WHERE prd_cost is null OR prd_cost < 0;  -- IF prd_cost is less than 0, that means there are negative values in the column.

-- Data Standardization and Consistancy.

select 
DISTINCT(prd_line)
from Silver.crm_prod;

-- Check for invalid date Orders
select
prd_start_dt
from Silver.crm_prod
WHERE prd_start_dt is null;

select
prd_id,
prd_key,
prd_nm,
cast(prd_start_dt as date)  prd_start_dt,
--cast(prd_end_dt as date) prd_end_date,
cast(LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt) -1 as date) prd_end_dt
from Bronze.crm_prod;

select * from Silver.crm_prod
WHERE prd_end_dt < prd_start_dt;

-- Final Silver.crm_prod_info is ready

select *
from Silver.crm_prod;

-- crm.sales_details : Clean & Load

select * 
from Bronze.crm_sales_details;

select 
COUNT(sls_ord_num)
from Bronze.crm_sales_details
--WHERE sls_ord_num is null
HAVING COUNT(sls_ord_num) > 1;

-- Check for the date whether it is null or is in any other format. If yes then perform transformatins on it.

select
NULLIF(sls_order_dt, 0) sls_order_dt
From Bronze.crm_sales_details
WHERE sls_order_dt <= 0
OR LEN(sls_order_dt) != 8
OR sls_order_dt > 20500101
OR sls_order_dt < 19000101;

select 
NULLIF(sls_ship_dt, 0) sls_ship_dt
from Bronze.crm_sales_details
WHERE sls_ship_dt <= 0
OR sls_ship_dt > 20500101
OR sls_ship_dt < 19000101;

select
NULLIF(sls_due_dt, 0) sls_due_dt
FROM Bronze.crm_sales_details
WHERE LEN(sls_due_dt) != 8
OR sls_due_dt <= 0
OR sls_due_dt > 20500101
OR sls_due_dt < 19000101;

--Order date is always greater than the Shipping date and Due date
Select * from 
Bronze.crm_sales_details
WHERE sls_order_dt > sls_ship_dt OR sls_order_dt > sls_ship_dt;

-- Check data consistancy betwen sales, quantity and price.
-- >> Sales = Price * Quantty
-- Value must not be Null, Zero or Negative

Select DISTINCT
sls_sales as old_sales,
sls_quantity,
sls_price as old_price,
CASE WHEN sls_sales IS NULL OR sls_sales <= 0 OR sls_sales != sls_quantity * ABS(sls_price)
	 THEN sls_quantity * ABS(sls_price)
	 ELSE sls_sales
END AS sls_sales,

CASE WHEN sls_price IS NULL OR sls_price <=0 
	 THEN sls_sales / NULLIF(sls_quantity, 0)
	 ELSE sls_price
END sls_price
From Bronze.crm_sales_details
Where sls_sales <= 0 OR sls_quantity <= 0 OR sls_price <= 0
OR sls_sales != sls_price * sls_quantity
OR sls_sales IS NULL OR sls_price IS NULL OR sls_quantity IS NULL
ORDER BY old_sales,sls_quantity, sls_price;

select * From Silver.crm_sales_details

-- ERP SYSTEM DATA CLEAN UP & LOAD

select
CASE WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid, 4, LEN(cid))
	ELSE cid
END AS cid,
CASE WHEN bdate > GETDATE() THEN NULL
	 ELSE bdate
END bdate,

CASE WHEN UPPER(TRIM(gen)) IN ('F', 'FEMALE') THEN 'Female'
	 WHEN UPPER(TRIM(gen)) IN ('M', 'MALE') THEN 'Male'
	 ELSE 'n/a'
END AS gen
From Bronze.erp_cust_az12;

--Birthdates remove extreme 
select DISTINCT
bdate
From Bronze.erp_cust_az12
WHERE bdate > '1920-01-01' OR bdate > GETDATE();

-- Data Standardizations and Consistancy
select DISTINCT 
gen
from Bronze.erp_cust_az12;

-- 2 Table 

select 
REPLACE(cid, '-', '') cid,
CASE WHEN TRIM(cntry) = 'DE' THEN 'Germany'
	 WHEN TRIM(cntry) IN ('US', 'USA') THEN 'United States'
	 WHEN TRIM(cntry) is NULL OR cntry = ' ' THEN 'n/a'
	 ELSE TRIM(cntry)
END AS cntry
from Bronze.erp_loc_a101;

select DISTINCT 
cntry as Old_cntry,
CASE WHEN TRIM(cntry) = 'DE' THEN 'Germany'
	 WHEN TRIM(cntry) IN ('US', 'USA') THEN 'United States'
	 WHEN TRIM(cntry) is NULL OR cntry = ' ' THEN 'n/a'
	 ELSE TRIM(cntry)
END AS cntry
from Bronze.erp_loc_a101;

select * from silver.erp_loc_a101;

-- 3rd Table from the ERP System

select * from Bronze.erp_px_cat_g1v2;

-- Check for unwanted spaces in the columns
select * from Bronze.erp_px_cat_g1v2
WHERE cat != TRIM(cat)
OR subcat != TRIM(subcat)
OR maintenance != maintenance;

-- Data Standardization & Consistancy
--All good

select * from Silver.erp_px_cat_g1v2;
